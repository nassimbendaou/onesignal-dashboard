[{"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\index.js":"1","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\reportWebVitals.js":"2","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\App.js":"3","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\NotificationSender.jsx":"4","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\Sidebar.jsx":"5","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\DashBoard.jsx":"6","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\NotificationDuplication.jsx":"7","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\NotificationInfos.jsx":"8","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\PlayerTab.jsx":"9","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Data\\firebase.js":"10","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\ProgressIndicator.jsx":"11","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\NotificationsForm.jsx":"12","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\MobileShape.jsx":"13","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\DropDown.jsx":"14","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\StatesCard.jsx":"15","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\Table.jsx":"16","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\Chart.jsx":"17","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\Notification.jsx":"18","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\NotificationDupForm.jsx":"19","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\SimplePopover.jsx":"20","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Data\\Ref.js":"21","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\DropDownElement.jsx":"22","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\EmojiPicker.jsx":"23","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\SessionsSelector.jsx":"24","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\CountrySelect.jsx":"25","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\DatePicker.jsx":"26","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\detailsPopOver.jsx":"27","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Utils\\statsCardStyle.jsx":"28","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\TabNotif.jsx":"29","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\UserNotif.jsx":"30","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Utils\\taskCardStyle.jsx":"31","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Utils\\styles.jsx":"32","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\UserDataView.jsx":"33","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\PlayerTabInfos.jsx":"34","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\PlayerNotificationsTabs.jsx":"35"},{"size":517,"mtime":1623185655041,"results":"36","hashOfConfig":"37"},{"size":375,"mtime":1623185655057,"results":"38","hashOfConfig":"37"},{"size":2757,"mtime":1625701059459,"results":"39","hashOfConfig":"37"},{"size":11108,"mtime":1625759269216,"results":"40","hashOfConfig":"37"},{"size":1587,"mtime":1625574239872,"results":"41","hashOfConfig":"37"},{"size":4837,"mtime":1625574239844,"results":"42","hashOfConfig":"37"},{"size":12027,"mtime":1625574239858,"results":"43","hashOfConfig":"37"},{"size":684,"mtime":1625574239858,"results":"44","hashOfConfig":"37"},{"size":8858,"mtime":1625701017428,"results":"45","hashOfConfig":"37"},{"size":4731,"mtime":1625701201012,"results":"46","hashOfConfig":"37"},{"size":586,"mtime":1623185654972,"results":"47","hashOfConfig":"37"},{"size":19793,"mtime":1625757518414,"results":"48","hashOfConfig":"37"},{"size":2107,"mtime":1625574239851,"results":"49","hashOfConfig":"37"},{"size":1531,"mtime":1625574239844,"results":"50","hashOfConfig":"37"},{"size":2644,"mtime":1625574239872,"results":"51","hashOfConfig":"37"},{"size":4772,"mtime":1625574239879,"results":"52","hashOfConfig":"37"},{"size":5502,"mtime":1625574239844,"results":"53","hashOfConfig":"37"},{"size":6642,"mtime":1625574239851,"results":"54","hashOfConfig":"37"},{"size":19832,"mtime":1625574239907,"results":"55","hashOfConfig":"37"},{"size":5345,"mtime":1625574239907,"results":"56","hashOfConfig":"37"},{"size":720,"mtime":1625759615073,"results":"57","hashOfConfig":"37"},{"size":437,"mtime":1623185654956,"results":"58","hashOfConfig":"37"},{"size":2180,"mtime":1625756404134,"results":"59","hashOfConfig":"37"},{"size":1689,"mtime":1625574239907,"results":"60","hashOfConfig":"37"},{"size":11624,"mtime":1625574239893,"results":"61","hashOfConfig":"37"},{"size":4034,"mtime":1625758239046,"results":"62","hashOfConfig":"37"},{"size":4648,"mtime":1625574239914,"results":"63","hashOfConfig":"37"},{"size":2225,"mtime":1623185655003,"results":"64","hashOfConfig":"37"},{"size":5945,"mtime":1625574239872,"results":"65","hashOfConfig":"37"},{"size":5852,"mtime":1625574239886,"results":"66","hashOfConfig":"37"},{"size":1923,"mtime":1625574239921,"results":"67","hashOfConfig":"37"},{"size":3465,"mtime":1623185655003,"results":"68","hashOfConfig":"37"},{"size":3335,"mtime":1625754717734,"results":"69","hashOfConfig":"37"},{"size":3517,"mtime":1625755890563,"results":"70","hashOfConfig":"37"},{"size":6718,"mtime":1625755808089,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1j1v3bd",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\index.js",[],["152","153"],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\App.js",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\NotificationSender.jsx",["154","155"],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\Sidebar.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\DashBoard.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\NotificationDuplication.jsx",["156","157","158","159"],"/**\r\n * l'interface send : \r\n * envoyer les notifications\r\n */\r\n\r\n\r\n import axios from 'axios';\r\n import React, { useState } from 'react';\r\n import MobileShape from './MobileShape';\r\n import NotificationDupForm from './subComponent/NotificationDupForm';\r\n import ProgressIndicator from './ProgressIndicator';\r\n import { useLocation } from \"react-router-dom\";\r\n\r\n\r\n const NotificationDuplication = props => {\r\n   const [notificationState, setNotificationState] = useState({\r\n     title: '',\r\n     subtitle: '',\r\n    \r\n     url:\"\",\r\n     imageUrl:\"\",\r\n     tag:\"\",\r\n     additionnalData : [],\r\n     \r\n   });\r\n   \r\n const loc = useLocation();\r\n \r\n   const notifiction = React.useRef(notificationState)\r\n   const [ios, setIos] = useState(true);\r\n   const [notif, setNotifData] = useState({});\r\n   const [emails, setEmails] = useState([]);\r\n   const [android, setAndroid] = useState(true);\r\n   const [country, setCountry] = useState({});\r\n     const [location, setLocation] = useState({});\r\n     const [langage, setLanguage] = useState({});\r\n     const [F_session, set_F_Session] = useState({});\r\n     const [L_session, set_L_Session] = useState({});\r\n     const [amountTime, setAmountTime] = useState({});\r\n     const [sessionCount, setSessionCount] = useState({});\r\n     const [time, setTime] = useState(undefined);\r\n   const path = \"https://onesignal.com/api/v1/notifications\";\r\n   React.useEffect(() => {\r\n       \r\n     //notifiction.current = result\r\n     //test\r\n     axios.get(`https://onesignal.com/api/v1/notifications/${loc.state.notifId}?app_id=e88e0d46-c05a-45d7-a0fe-9e82eb884f88`,  { headers: {\r\n  \r\n        'Content-Type': 'application/json',\r\n        /* /ZDI0ZTYyOGMtZmU5Mi00ZDM5LWJmZjEtZDhhMjdhN2NhMzIx/ REST API KEY de OneSignal   */\r\n        Authorization: 'Basic ZDI0ZTYyOGMtZmU5Mi00ZDM5LWJmZjEtZDhhMjdhN2NhMzIx'\r\n    \r\n      }}).then(data=>{\r\n      \r\n        setNotifData(data.data);\r\n        console.log(notif.filters)\r\n        setNotificationState({\r\n            title:data.data.headings.en,\r\n            subtitle: data.data.contents.en,     \r\n            url:data.data.url,\r\n            imageUrl:data.data.big_picture,\r\n            tag:data.data.data.value,\r\n            additionnalData : data.data.data.additionnalData\r\n          });\r\n        \r\n      });\r\n\r\n   }, [])\r\n   const [loadingState, setLoadingState] = useState({\r\n     isLoading: false\r\n   });\r\n \r\n   const _resetFields = () => {\r\n     setNotificationState({\r\n       title: '',\r\n       subtitle: '',\r\n       url:'',\r\n       imageUrl:'',\r\n       tag:'',\r\n       additionnalData : ''\r\n     });\r\n   }\r\n \r\n   const _handleTitleChange = (e) => {\r\n     setNotificationState({\r\n       title: e.target.value,\r\n       subtitle: notificationState.subtitle,     \r\n       url:notificationState.url,\r\n       imageUrl:notificationState.imageUrl,\r\n       tag:notificationState.tag,\r\n       additionnalData : notificationState.additionnalData\r\n     });\r\n   }\r\n \r\n   const _handleSubtitleChange = (e) => {\r\n     setNotificationState({\r\n       title: notificationState.title,\r\n       subtitle:  e.target.value, \r\n       url:notificationState.url,\r\n       imageUrl:notificationState.imageUrl,\r\n       tag:notificationState.tag,\r\n       additionnalData : notificationState.additionnalData\r\n     });\r\n     }\r\n     const _handleImageUrlChange = (e) => {\r\n       console.log(e.target.value)\r\n       setNotificationState({\r\n         title: notificationState.title,\r\n         subtitle:  notificationState.subtitle, \r\n         url:notificationState.url,\r\n         imageUrl:e.target.value,\r\n         tag:notificationState.tag,\r\n         additionnalData : notificationState.additionnalData\r\n       });\r\n     }\r\n     const _handleUrlChange = (e) => {\r\n       setNotificationState({\r\n         title: notificationState.title,\r\n         subtitle:  notificationState.subtitle,\r\n        \r\n         url:e.target.value,\r\n         imageUrl:notificationState.imageUrl,\r\n         tag:notificationState.tag,\r\n         additionnalData : notificationState.additionnalData\r\n       });\r\n     }\r\n     const _handleCampagne = (e) => {\r\n       \r\n       setNotificationState({\r\n         title: notificationState.title,\r\n         subtitle:   notificationState.subtitle,\r\n       \r\n         url:notificationState.url,\r\n         imageUrl:notificationState.imageUrl,\r\n         tag:e.target.value,\r\n         additionnalData : notificationState.additionnalData\r\n       });\r\n     }\r\n     const _handledata = (additionnaldata) => {\r\n         // fonction d'ajout des metadata\r\n         console.log(\"data\",additionnaldata)\r\n         setNotificationState(notificationState => \r\n           setNotificationState({\r\n           title: notificationState.title,\r\n           subtitle:   notificationState.subtitle,\r\n        \r\n           url:notificationState.url,\r\n           imageUrl:notificationState.imageUrl,\r\n           tag:notificationState.tag,\r\n           additionnalData : additionnaldata\r\n         }));\r\n       \r\n       console.log(\"new data /*additional data*/\", notificationState)\r\n     }\r\n     \r\n const  _handleEmails = (mails) =>{\r\n \r\n   let filters  =[]\r\n   console.log(\"filters\",mails)\r\n   mails.map(e=>{\r\n     filters.push({ \"key\": \"value\",\r\n       \"field\": \"email\",\r\n       \"value\": e,\r\n       \"relation\": \"=\"\r\n    })\r\n    \r\n    filters.push({\"operator\": \"OR\"})\r\n        \r\n   })\r\n   // éliminer le dérnier OR \r\n   filters.pop();\r\n \r\n     //filtrer par emails\r\n  \r\n   console.log(\"emails\",filters)\r\n   setEmails(filters)\r\n   /*setNotificationState(notificationState =>  setNotificationState({\r\n     title: notificationState.title,\r\n     subtitle:   notificationState.subtitle,\r\n     filter: filters,\r\n     url:notificationState.url,\r\n     imageUrl:notificationState.imageUrl,\r\n     tag:notificationState.tag,\r\n     additionnalData : notificationState.additionnalData\r\n   }));*/\r\n \r\n }\r\n const _handleTime=(time)=>{\r\n     setTime(time)\r\n }\r\n const  _handleLocation = (long,lat,r) =>{\r\n     //filtrer par localisation\r\n   if(lat !== 0 && lat !== 0 && r !== 0){\r\n   let filters={ \"radius\" : r,\r\n       \"lat\":lat,\r\n       \"long\" : long\r\n    };\r\n    setLocation(filters)\r\n     \r\n   }\r\n }\r\n   const  _handleLanguage = (lang) =>{\r\n     let filters={ \r\n         \"field\": \"language\",\r\n         \"value\": lang.target.value,\r\n         \"relation\": \"=\"\r\n      };\r\n     setLanguage(filters)\r\n          \r\n   \r\n \r\n }\r\n const  _handleCountry = (country) =>{\r\n   let filters={ \r\n       \"field\": \"country\",\r\n       \"value\": country.target.value,\r\n       \"relation\": \"=\"\r\n    }\r\n    setCountry(filters)\r\n        \r\n \r\n }\r\n const  _handleAmountSpent = (time) =>{\r\n     //filtrer par combien de minute l'utilisateur à passer dans l'application\r\n   let filters={ \r\n       \"field\": \"amount_spent\",\r\n       \"value\": time,\r\n       \"relation\": \">\"\r\n    }\r\n        \r\n \r\n    setAmountTime(filters)\r\n }\r\n const  _handlePlatfrom = (p) =>{\r\n   //filtre d'OS (IOS, Android ou les deux ) il y a la possibilité d'ajouté d'autres platformes ...\r\n   switch (p.target.value) {\r\n     case \"ios\":\r\n       setAndroid(false)\r\n       break;\r\n     case \"android\" : \r\n       setIos(false)\r\n       break;\r\n     case \"all\" : \r\n      \r\n       break;\r\n   }\r\n   }\r\n const  _handleSessionCount = (nb) =>{\r\n   \r\n     //filtre des nombres des sessions l'utilisateur\r\n     let filters={ \r\n       \"field\": \"session_count\",\r\n       \"value\": nb,\r\n       \"relation\": \"=\"\r\n    };\r\n    setSessionCount(filters)\r\n        \r\n \r\n \r\n }\r\n \r\n const  _handle_Last_Session = (time,rel) =>{\r\n   //filtre de la dernier session\r\n   if(rel.target !== undefined){\r\n   let filters={ \r\n       \"field\": \"last_session\",\r\n       \"value\": time,\r\n       \"relation\": rel.target.value\r\n    }\r\n    set_L_Session(filters)\r\n        \r\n }\r\n }\r\n const  _handle_First_Session = (time,rel) =>{\r\n   if(rel.target !== undefined){\r\n     //filtre de la premiere session\r\n   let filters={ \r\n       \"field\": \"first_session\",\r\n       \"value\": time,\r\n       \"relation\": rel.target.value\r\n    }\r\n    set_F_Session(filters)\r\n        \r\n \r\n }\r\n }\r\n   const _handleSend = () => {\r\n     let filters  = [];\r\n    emails.forEach(e=>filters.push(e))\r\n    filters.push(location);\r\n    filters.push(country);\r\n    filters.push(langage);\r\n    filters.push(sessionCount);\r\n    filters.push(amountTime);\r\n    filters.push(F_session);\r\n    filters.push(L_session);\r\n    //annuler les objets vides\r\n    filters =  filters.filter(value => JSON.stringify(value) !== '{}');\r\n    console.log(\"filters\", filters)\r\n     setNotificationState(notificationState =>  setNotificationState({\r\n       title: notificationState.title,\r\n       subtitle:   notificationState.subtitle,\r\n       url:notificationState.url,\r\n       imageUrl:notificationState.imageUrl,\r\n       tag:notificationState.tag,\r\n       additionnalData : notificationState.additionnalData\r\n     }));\r\n     setLoadingState({\r\n       isLoading: true\r\n     });\r\n     //paramétres de la requetes http\r\n     var params = {\r\n \r\n       method: 'post',\r\n \r\n       url: path,\r\n \r\n       headers: {\r\n \r\n         'Content-Type': 'application/json',\r\n           // clé secret de l'api rest \r\n         Authorization: 'Basic ZDI0ZTYyOGMtZmU5Mi00ZDM5LWJmZjEtZDhhMjdhN2NhMzIx'\r\n \r\n       },\r\n      \r\n \r\n       data: {\r\n           // id de l'application\r\n         app_id: 'e88e0d46-c05a-45d7-a0fe-9e82eb884f88',\r\n \r\n         headings: {\r\n           en: notificationState.title, \r\n         },\r\n         contents: {\r\n           en: notificationState.subtitle,\r\n         },\r\n         url: notificationState.url,\r\n         //URL de l'image qui s'affiche sur la notif (big picture c'est un parametre des appareil Android )\r\n         big_picture : notificationState.imageUrl,\r\n         send_after: time === undefined ? new Date() : time,\r\n         //l'alternative de big_picture sur ios \r\n         /**https://documentation.onesignal.com/docs/rich-media#media-attachments\r\n          * https://documentation.onesignal.com/reference/create-notification#attachments (goto ios_attachement)\r\n          */\r\n         ios_attachments : {id :notificationState.imageUrl, },\r\n         //si aucun filtre n'est choisie on doit spécifier le segment par defaut pour envoyer la notification à tout les users (dans onesignal on doit configurer le segment par defaut à all subscribed users)\r\n         included_segments: notif.filters.length > 0 ? [] : [\"Default Segment\"] ,\r\n         filters :notif.filters,\r\n         isIos : ios,\r\n         isAndroid : android,\r\n         data:{\"key\":\"campagne\",value:notificationState.tag,additionnalData : notificationState.additionnalData}\r\n       }\r\n \r\n     }\r\n     console.log(params)\r\n     //appeler l'api par axios\r\n     axios(params).then((e)=>\r\n    { setLoadingState({\r\n       isLoading: false\r\n     })\r\n     console.log(\"resp\",e);\r\n      _resetFields();\r\n     }\r\n     )\r\n   }\r\n \r\n   return loadingState.isLoading\r\n     ?<div > <ProgressIndicator left={props.left}/></div>\r\n     : <div >\r\n       <div style={{marginBottom:200,backgroundColor:\"#FDFDFD\",float:\"left\"}}><NotificationDupForm left={props.left}\r\n     titleChange={_handleTitleChange}\r\n     subtitleChange={_handleSubtitleChange}\r\n     emails={_handleEmails}\r\n     urlChange={_handleUrlChange}\r\n     imageUrl={_handleImageUrlChange}\r\n     click={_handleSend}\r\n     campagne={_handleCampagne}\r\n     data={_handledata}\r\n     language = {_handleLanguage}\r\n     session_count={_handleSessionCount}\r\n     amountSpent={_handleAmountSpent}\r\n     country={_handleCountry}\r\n     platform={_handlePlatfrom}\r\n     location={_handleLocation}\r\n     first_session={_handle_First_Session}\r\n     last_session={_handle_Last_Session}\r\n     titleDup={notificationState.title}\r\n     messageDup={notificationState.subtitle}\r\n     imageDup={notificationState.imageUrl}\r\n     urlDup={notificationState.url}\r\n     campagneDup={notificationState.tag}\r\n     time={_handleTime}\r\n   /></div><MobileShape image={notificationState.imageUrl} \r\n                         title={notificationState.title}\r\n                         text={notificationState.subtitle}\r\n   /></div>\r\n }\r\n \r\n export default NotificationDuplication;","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\NotificationInfos.jsx",["160"],"import React, { useEffect } from 'react'\r\nimport Notification from \"./Notification\"\r\nimport { useLocation } from \"react-router-dom\";\r\nfunction NotificationInfos(props){\r\n    //useLocation l'objet de react-router-dom pour la récupération des données de la session\r\n    const location = useLocation();\r\n    useEffect(() => {\r\n        \r\n\r\n        console.log(location.state.id)\r\n    }, []);\r\n  \r\n    return (\r\n           <div style={{display:'block',backgroundColor:\"#f8f9fa\",marginBottom:100}}>\r\n               <div style={{marginLeft:window.innerWidth*0.25}}><Notification id={location.state.id} /> </div>  \r\n      \r\n            </div>\r\n    )\r\n}\r\nexport default NotificationInfos;\r\n","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\PlayerTab.jsx",["161","162","163","164"],"/**\r\n * interface User pour visualiser les données des utilisateur !\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport StatesCard from \"./StatesCard\"\r\nimport {\r\n\r\n  Update,\r\n  NotificationsNoneOutlined,\r\n  Accessibility\r\n} from \"@material-ui/icons\";\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport SimplePopover from './subComponent/SimplePopover';\r\nlet rows=[];\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n//crétaion des lignes du tableau \r\nfunction createData(id,identifier,language,last_active,created_at) {\r\n\r\n  return { id,identifier,language,last_active : new Date(last_active*1000).toLocaleDateString(\"fr-FR\"),created_at: new Date(created_at*1000).toLocaleDateString(\"fr-FR\")};\r\n}\r\n\r\nconst getUsers=()=>{\r\nvar paramsUsers = {\r\n\r\n    method: 'get',\r\n        //retourner les utilisateurs de l'app id = .... en se limitant dans 300 utilisateur\r\n    url: 'https://onesignal.com/api/v1/players?app_id=e88e0d46-c05a-45d7-a0fe-9e82eb884f88&limit=300&offset=0',\r\n\r\n    headers: {\r\n\r\n      'Content-Type': 'application/json',\r\n                            // rest api key de onesignal\r\n      Authorization: 'Basic ZDI0ZTYyOGMtZmU5Mi00ZDM5LWJmZjEtZDhhMjdhN2NhMzIx'\r\n\r\n    }\r\n\r\n  }\r\n    return axios(paramsUsers);\r\n}\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n \r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    \r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\n\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\nconst handleIdentifier=(row)=>{\r\n  if(row.identifier.length>20) {return row.identifier.slice(0, 19)+\"...\";}\r\n  else return row.identifier\r\n}\r\n\r\nexport default function UserTable(props) {\r\n  const classes = useStyles2();\r\n  const history = useHistory();\r\n  const [page, setPage] = React.useState(0);\r\n  const [users, setUsers] = React.useState(0);\r\n  const [row, setRow] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(-1);\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\nReact.useEffect(() => {\r\n    //récupération des donées des utilisateurs et les enregistrer dans la state\r\n    getUsers().then(d=>{\r\n      setUsers(d.data.total_count)\r\n      let rowData = []\r\n       \r\n      d.data.players.forEach(e=>{\r\n        \r\n        rows.push(createData(e.id,e.identifier,e.language,e.last_active,e.created_at));\r\n      });\r\n      setRow(rows)\r\n      console.log(\"row data\",rows)\r\n    } )\r\n\r\n   \r\n       \r\n    \r\n}, [])\r\n\r\n\r\n  return (\r\n    <div style={{marginBottom:70}}>\r\n       <div  style={{marginLeft:props.left,padding:0,height:180,width:window.innerWidth-(props.left+50),marginBottom:100,alignSelf:\"center\"}}>\r\n          <StatesCard\r\n              icon={Accessibility}\r\n              iconColor=\"blue\"\r\n              title=\"Users\"\r\n              description={users}\r\n              statIcon={Update}\r\n              statText=\"Just Updated\"\r\n           />\r\n            </div>\r\n  <TableContainer component={Paper}  style={{width:window.innerWidth-(props.left+50),marginLeft:props.left,marginTop:30,marginBottom:70}}>\r\n      <Table className={classes.table} aria-label=\"custom pagination table\">\r\n      <TableHead style={{zIndex:1000}}>\r\n          <TableRow>\r\n          <TableCell align=\"center\"><strong>ID</strong></TableCell>\r\n            <TableCell align=\"center\"><strong>User identifier</strong></TableCell>\r\n        \r\n            <TableCell align=\"center\"><strong>language</strong> </TableCell>\r\n           \r\n            <TableCell align=\"center\" ><strong>last session </strong> </TableCell>\r\n            <TableCell align=\"center\" ><strong>first session</strong></TableCell>\r\n            <TableCell align=\"center\"><strong>notifications</strong></TableCell>\r\n            \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n        {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows\r\n          ).map((row) =>  ( <TableRow key={row.identifier}>\r\n             <TableCell style={{ width: 160 }} align=\"center\">\r\n             {row.id}\r\n            </TableCell>\r\n            <TableCell style={{ width: 70 }} align=\"center\">\r\n             {handleIdentifier(row)}\r\n            </TableCell>\r\n            <TableCell style={{ width: 160 }} align=\"center\">\r\n              {row.language}\r\n            </TableCell>\r\n            <TableCell style={{ width: 160 }} align=\"center\">\r\n              {row.last_active}\r\n            </TableCell>\r\n             <TableCell style={{ width: 160 }} align=\"center\">\r\n              {row.created_at}\r\n            </TableCell>\r\n          <TableCell style={{ width: 160 }} align=\"center\">\r\n               <button  style={{background:\"transparent\",borderColor:\"transparent\"}}><MoreVertIcon    onClick={() => {\r\n                    history.push('/PlayerInfo',{email : row.identifier})\r\n                }} /></button> \r\n            </TableCell>\r\n          </TableRow>))}\r\n\r\n          {emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <TableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n              colSpan={3}\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n    <div  style={{marginTop:30,marginBottom:70,marginLeft:props.left}}>   </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n ","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Data\\firebase.js",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\ProgressIndicator.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\NotificationsForm.jsx",["165","166","167","168","169","170","171","172"],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\MobileShape.jsx",["173"],"/**\r\n * le mobile qui est affiché dans les interfaces\r\n * https://www.webtipstricks.com/2017/09/html-css-create-iphone-mobile-layout.html\r\n */\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react'\r\nimport \"../mobileShape.css\"\r\n\r\nexport default class MobileShape extends Component {\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            title :\"\",\r\n            text :'',\r\n            image :'',\r\n            date: new Date()\r\n        }\r\n    }\r\n    componentDidMount(){\r\n      this.timerID = setInterval(\r\n        () => this.tick(),\r\n        1000\r\n      );\r\n    }\r\n    componentWillUnmount() {\r\n      clearInterval(this.timerID);\r\n    }\r\n  \r\n    tick() {\r\n      this.setState({\r\n        date: new Date()\r\n      });\r\n    }\r\n    handleText(txt){\r\n      var mytext;\r\n      var lines = txt.split(\"\\n\");\r\n      var numLines = lines.length;\r\n      for(var i = 0; i<numLines;i++){\r\n         mytext += <><p>{lines[0]}</p><br/></>\r\n      }\r\n    }\r\n    handleTime(){\r\n   return   new Date().toLocaleDateString(\"fr-FR\")+\" \"+this.state.date.toLocaleTimeString()\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{display:\"flow-root\"}}>\r\n                <div class=\"mobile\" style={{marginTop:150}}> \r\n                <div class=\"dialog-box\" style={{height: this.props.image? 260 : 110}}>\r\n    <div class=\"background-blur\" style={{height: this.props.image? 200 : 110}}></div>\r\n    <div class=\"header\">\r\n      <div class=\"background-blur\"></div>\r\n      <div class=\"contents\">\r\n      <div class=\"left\">\r\n        <i class=\"far fa-comment\"></i> Notification\r\n      </div>\r\n      <div class=\"right\">\r\n        {this.handleTime()}\r\n      </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"contents main-content\">\r\n      <strong>\r\n         {this.props.title}\r\n      </strong>\r\n      <br/>\r\n      {this.props.text}\r\n    </div>\r\n    {this.props.image &&  (<img src={this.props.image}   style={{width:240,height:150,position:\"relative\" , justifyContent: 'center',\r\n        alignItems: 'center'}} alt=\"Logo\" />)}\r\n  \r\n   \r\n  </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\DropDown.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\StatesCard.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\Table.jsx",["174","175","176","177"],"\r\n/**\r\n * le composent du tableau de l'interface dashboard qui affiche toutes les notifications \r\n */\r\n\r\nimport React,{useEffect} from 'react';\r\nimport '../App.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { useHistory } from 'react-router-dom';\r\nimport DetailsPopOver from \"./subComponent/detailsPopOver\"\r\n\r\nconst columns = [\r\n  { id: 'Text', label: 'Name', minWidth: 170 , align: 'left', },\r\n  { id: 'Sent', label: 'Notification Sent', minWidth: 100 ,  align: 'right',},\r\n  {\r\n    id: 'Succesfull',\r\n    label: 'Succesfull',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    \r\n  },\r\n  {\r\n    id: 'More',\r\n    label: 'More',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    \r\n  }\r\n];\r\n\r\nfunction createData(heading,text, Sent, Succesfull, time,id) {\r\n\r\n  return { notification : {heading :heading,text:text}, Sent, Succesfull,time,id};\r\n}\r\n\r\nconst rows = [\r\n\r\n\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nexport default function StickyHeadTable(props) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [row, setRow] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n  useEffect(() => {\r\n    \r\n    if(props.data !== undefined){\r\n        let rowData = []\r\n        props.data.forEach(e=>{\r\n          \r\n          rows.push(createData(e.headings.en,e.contents.en,e.successful, e.successful,e.queued_at,e.id));\r\n        });\r\n        setRow(rowData)\r\n    }\r\n\r\n\r\n}, [])\r\n\r\nconst history = useHistory();\r\nfunction TableCells(column,row){\r\n\r\n  if(column.id === 'More'){\r\n    //se redériger vers la page /notifInfo t envoyées l'id de la notification en parametres\r\n    return <DetailsPopOver id={row.id} />\r\n  //  return <button onClick={()=>{history.push('/NotifInfo',{id : row.id})}} style={{background:\"transparent\",borderColor:\"transparent\"}}><MoreVertIcon /></button> \r\n  }\r\n  else if (column.id ==='Text' ){\r\n    return ( \r\n       <div class=\"dialog-box\">\r\n    <div class=\"background-blur\"></div>\r\n    <div class=\"header\">\r\n      <div class=\"background-blur\"></div>\r\n      <div class=\"contents\">\r\n      <div class=\"left\">\r\n        <i class=\"far fa-comment\"></i> Notification\r\n      </div>\r\n      <div class=\"right\">\r\n        {new Date(row.time*1000).toLocaleDateString(\"fr-FR\")}\r\n      </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"contents main-content\">\r\n      <strong>\r\n      {row.notification.heading}\r\n      </strong>\r\n      <br/>\r\n      {row.notification.text}\r\n    </div>\r\n  </div>)\r\n  }else{\r\n    return row[column.id]\r\n  }\r\n}\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n        <TableHead style={{zIndex:1000}}>\r\n          <TableRow>\r\n            <TableCell>Notification Text</TableCell>\r\n            <TableCell align=\"right\">Notifications Sent </TableCell>\r\n            <TableCell align=\"right\">Successfull </TableCell>\r\n            <TableCell align=\"right\">More</TableCell>\r\n            \r\n          </TableRow>\r\n        </TableHead>\r\n          <TableBody>\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (\r\n                <TableRow hover  tabIndex={-1} key={row.code}>\r\n                  {columns.map((column) => {\r\n                    \r\n                    return (\r\n                      <TableCell key={column.id} align={column.align}>\r\n                        {TableCells(column,row)}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\Chart.jsx",["178"],"\r\n\r\n/***\r\n * cet classe définit le graphique qui affiche les les données de notification \r\n */\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\nexport default class Chart extends Component {\r\n\r\n\r\n\r\n  /**supprimer une valeur d'un tableau */\r\n   arrayRemove=(arr, value)=> { \r\n    \r\n    return arr.filter(function(ele){ \r\n        return ele !== value; \r\n    });\r\n    }\r\n\r\n/*filterer et structurer l'objet json à un objet avec deux valeur time et success \r\n(time pour la date de la notif et success c'est pour le nombre des notifs qui ont été envoyées avec succées)*/\r\n  sortingarray=(arr)=>{\r\n    //getDaysArray retoutn tout les jour entre la premier notification envoyées et la dernière \r\n    var getDaysArray = function(s,e) {for(var a=[],d=new Date(s);d<=e;d.setDate(d.getDate()+1)){ a.push(new Date(d).toLocaleDateString(\"fr-FR\"));}return a;};\r\n    var daylist = getDaysArray(new Date(arr[0].queued_at*1000),new Date());\r\n  \r\n    let res = [] \r\n    //enregistrer les dates de chaque notification dans le nouveau tableau et supprimer les memes dates du tableau générer par getDaysArray\r\n    arr.forEach(element => {\r\n      \r\n     \r\n        res.push({time : new Date(element.queued_at*1000).toLocaleDateString(\"fr-Fr\"),success : element.successful});\r\n        if(this.props.Global){\r\n        this.arrayRemove(daylist,new Date(element.queued_at*1000).toLocaleDateString(\"fr-FR\"))\r\n        }\r\n     \r\n    });\r\n    //ajouter ce qui reste du daylist dans le tableau res \r\n    if(this.props.Global){\r\n    daylist.forEach(e=>{\r\n      res.push({time : e,success : 0});\r\n    })\r\n  }\r\n    return res;\r\n\r\n  }\r\n   toTimestamp=(strDate)=>{\r\n    var datum = Date.parse(strDate);\r\n    return datum/1000;\r\n }\r\n//filtrer les dates du tableau par variable time\r\ncompare=( a, b )=> {\r\n  if ( this.toTimestamp(a.time) < this.toTimestamp(b.time) ){\r\n    return -1;\r\n  }\r\n  if ( this.toTimestamp(a.time).times > this.toTimestamp(b.time) ){\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n//supprimer les redoublon du tableau \r\n  sorting=(array)=> {\r\n    var arr=this.sortingarray(array)\r\n    \r\n    var a = [],\r\n      b = [],\r\n      prev={};\r\n  \r\n      arr.sort( this.compare );\r\n      arr.reverse()\r\n      //ajouter les résultat des dates qui sont égaux ex : {13/06/2021,6} et {13/06/2021,3} ===> {13/06/2021,9}\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i].time !== prev.time) {\r\n        a.push(arr[i].time);\r\n        b.push(arr[i].success);\r\n      } else {\r\n        b[b.length - 1] += arr[i].success;\r\n      }\r\n      prev = arr[i];\r\n    }\r\n    // retourner les dates et les données séparement\r\n\r\n    return [a, b];\r\n   \r\n  }\r\n  \r\n  \r\n  \r\n\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      labels:[],\r\n      dataLabels:[],\r\n\r\n    }\r\n  }\r\n  UNSAFE_componentWillMount(){\r\n    let initLabels =[]\r\n    \r\n    if(this.props.data.length!==0){\r\n      \r\n        this.props.data.map(e => {\r\n          let date = new Date(e.queued_at*1000).toLocaleDateString(\"fr-FR\")\r\n          \r\n          initLabels.push(date)\r\n        });\r\n    \r\n        //si le graphique et globale alors global (afficher toutes les notification succefull ou pas) sera TRUE\r\n        if(this.props.Global){\r\n         \r\n          initLabels =this.sorting(this.props.data);\r\n          this.setState({labels:initLabels[0]});\r\n          this.setState({dataLabels:initLabels[1]})\r\n\r\n        }else{\r\n          \r\n          initLabels = this.sorting(this.props.data)\r\n          this.setState({labels:initLabels[0]});\r\n          this.setState({dataLabels:initLabels[1]})\r\n        }\r\n       \r\n       \r\n\r\n   \r\n     \r\n    }\r\n  }\r\n  \r\n  render() \r\n  {\r\n\r\n    \r\n    const data = {\r\n  labels: this.state.labels, //X-axis data\r\n  datasets: [\r\n    {\r\n      label:   this.props.Name, \r\n      fill: false,\r\n      lineTension: 0.1,\r\n      backgroundColor: this.props.color,//couleur de chaque graph \r\n      borderColor: this.props.color,\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.1,\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: this.props.color,\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: this.props.color,\r\n      pointHoverBorderColor: this.props.color,\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: this.state.dataLabels,  //Y-axis data\r\n      \r\n    \r\n    },\r\n  ],\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    \r\n    yAxes: [\r\n      {\r\n        ticks: {\r\n          min: 0,\r\n          max : 30\r\n        }\r\n      }\r\n    ]\r\n  }\r\n,\r\n  legend: {\r\n    display: false,\r\n  },\r\n  tooltips: {\r\n    enabled: false,\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n           <Line data={data} options={options} style={{backgroundColor:\"#fff\"}} />   \r\n            \r\n         \r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n /*<Line data={data} options={options} style={{backgroundColor:\"#fff\"}} /><ChartCard\r\n              chart={\r\n                <ChartistGraph\r\n                  className=\"ct-chart\"\r\n                  data={dailySalesChart.data}\r\n                  type=\"Line\"\r\n                  options={dailySalesChart.options}\r\n                  listener={dailySalesChart.animation}\r\n                />\r\n              }\r\n              chartColor=\"green\"\r\n              title=\"Daily Sales\"\r\n              text={\r\n                <strong>Last 50 Notifications </strong>\r\n              }\r\n              statIcon={AccessTime}\r\n              \r\n            />*/","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\Notification.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\NotificationDupForm.jsx",["179","180","181","182","183","184"],"\r\n/**\r\n * le formulaire pour remplir les données de la notifications \r\n */\r\n\r\n import React,{ useState } from 'react';\r\n import { makeStyles } from '@material-ui/core/styles';\r\n import TextField from '@material-ui/core/TextField';\r\n import Button from '@material-ui/core/Button';\r\n import CardActions from '@material-ui/core/CardActions';\r\n import CardContent from '@material-ui/core/CardContent';\r\n import Typography from '@material-ui/core/Typography';\r\n import SendIcon from '@material-ui/icons/Send';\r\n import { TagsInput } from \"react-tag-input-component\";\r\n import Card from '@material-ui/core/Card';\r\n import \"../../assets/style.scss\"\r\n import \"../../App.css\"\r\n import CheckIcon from '@material-ui/icons/Check';\r\n import AddIcon from '@material-ui/icons/Add';\r\n import InputLabel from '@material-ui/core/InputLabel';\r\n import ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n import FormControl from '@material-ui/core/FormControl';\r\n import Select from '@material-ui/core/Select';\r\n import AndroidIcon from '@material-ui/icons/Android';\r\n import AppleIcon from '@material-ui/icons/Apple';\r\n import MenuItem from '@material-ui/core/MenuItem';\r\n import CountrySelect from './CountrySelect';\r\n import SessionsSelector from './SessionsSelector';\r\n import EmojiPicker from './EmojiPicker';\r\n import DateAndTimePickers from './DatePicker';\r\n import AddToPhotosOutlinedIcon from '@material-ui/icons/AddToPhotosOutlined';\r\n import ReactFileReader from 'react-file-reader';\r\n import CircularProgress from '@material-ui/core/CircularProgress';\r\n import clsx from 'clsx';\r\n \r\n const classes = makeStyles(theme => ({\r\n     button: {\r\n       margin: theme.spacing(1),\r\n     },\r\n     rightIcon: {\r\n       marginLeft: theme.spacing(1),\r\n     },\r\n     formControl: {\r\n         margin: theme.spacing(1),\r\n         minWidth: 80,\r\n         maxWidth:120\r\n       },\r\n       selectEmpty: {\r\n         marginTop: theme.spacing(2),\r\n       },\r\n       buttonProgress: {\r\n        \r\n         position: 'absolute',\r\n         top: '50%',\r\n         left: '50%',\r\n         marginTop: -12,\r\n         marginLeft: -12,\r\n       },\r\n       buttonSuccess: {\r\n         backgroundColor: \"primary\",\r\n         '&:hover': {\r\n           backgroundColor: \"primary\",\r\n         },\r\n       },\r\n       wrapper: {\r\n         margin: theme.spacing(1),\r\n         position: 'relative',\r\n       },\r\n       \r\n  \r\n   }));\r\n \r\n  \r\n const NotificationDupForm = (props) => {\r\n \r\n     const [selected, setSelected] = useState([]);\r\n     const [click, setClicked] = useState(false);\r\n     const [advanced, setAdvanced] = useState(false);\r\n   \r\n     const [data, setData] = useState([]);\r\n     const [loading, setLoading] = React.useState(false);\r\n   const [success, setSuccess] = React.useState(false);\r\n   const timer = React.useRef();\r\n    \r\n     const [longitude, setLongitude] = useState(0.0);\r\n     const [latitude, setLatitude] = useState(0.0);\r\n     const [raduis, setRaduis] = useState(0);\r\n     const [L_session, set_L_Session] = useState(0);\r\n     const [mails, setMails] = useState([]);\r\n     const [time, setTime] = useState(undefined);\r\n    \r\n     const [L_session_op, set_L_Session_op] = useState(\"\");\r\n     const [F_session, set_F_Session] = useState(0);\r\n     const [F_session_op, set_F_Session_op] = useState(\"\");\r\n  \r\n     \r\n     const handleTime=(e)=>{\r\n       //send after ****  le parametre pour programmer l'envoie programmé\r\n         setTime(new Date(Date.parse(e.target.value)).toUTCString())\r\n       \r\n       }\r\n const handleFiles = files  => {\r\n  /* var reader = new FileReader();\r\n   reader.onload = function(e) {\r\n       // Use reader.result\r\n \r\n   let Earray =   reader.result.split(\",\");\r\n   props.emails(Earray)\r\n \r\n \r\n   }\r\n   reader.readAsText(files[0]);*/\r\n \r\n   var reader = new FileReader();\r\n   \r\n     reader.readAsText(files[0]);\r\n      reader.onload=function(){\r\n        console.log(reader.result)\r\n        let Earray =   reader.result.split(\"\\r\\n\")[0].split(\",\");\r\n        props.emails(Earray)\r\n       }\r\n       setSuccess(true);\r\n   setLoading(false);\r\n }\r\n const buttonClassname = clsx({\r\n   [classes.buttonSuccess]: success,\r\n });\r\n        \r\n const handleTimeOut = () => {\r\n   setSuccess(false);\r\n   setLoading(true);\r\n }\r\n   const handleEmails=()=>{\r\n   let   filters = []\r\n   console.log(mails)\r\n   //ajouté le filtres des emails et ajouté l'opérateur OR ( mail1 or mail2 or ...)\r\n     \r\n     \r\n     \r\n   }\r\n   //composent des meta data\r\n   // ce composent il est sous composent de notification form car ilchange le state du parent\r\n     const ChildComponent = (props) =>  {\r\n       const [ok, setOk] = useState(false);\r\n       const [key, setKey] = useState(\"\");\r\n     const [val, setVal] = useState(\"\");\r\n     const [chosenEmoji,setChosenEmoji] = useState(\"\");\r\n     const _handlePair=()=>{\r\n       \r\n       let pair = {};\r\n       pair[key] = val;\r\n      \r\n       setData([...data,pair])\r\n      \r\n   }\r\n   \r\n \r\n   const onEmojiClick = (event, emojiObject) => {\r\n     setChosenEmoji(emojiObject);\r\n    \r\n   };\r\n \r\n       return (<div style={{display:\"inline\",marginTop:10}} id={props.id}>\r\n         <TextField disabled={ok} label=\"Key\" variant=\"outlined\" style={{backgroundColor:\"#fff\"}} onChange={(e)=>{setKey( e.target.value)}}/>\r\n         <TextField disabled={ok} label=\"Value\" variant=\"outlined\" style={{marginLeft:5,backgroundColor:\"#fff\"}}  onChange={(e)=>{setVal( e.target.value)}} />\r\n        \r\n        \r\n         <Button color=\"inherit\" onClick={()=>{_handlePair(); setOk(true);}} style={{alignSelf:\"center\",justifySelf:\"center\",marginTop:10}}>\r\n                         <CheckIcon style={{color:\"#00FF00\"}} />\r\n          </Button>\r\n       \r\n         \r\n         </div>)}\r\n         const [childs, setChilds] = useState(0);\r\n         const [children, set_children] = useState([]);\r\n \r\n    \r\n     const _handleChilds=()=>{\r\n       let div= <ChildComponent id={childs}/>;\r\n       set_children([...children, div]) \r\n     }\r\n   \r\n \r\n     return (\r\n         \r\n         <div style={{  marginLeft:props.left,marginBottom:100,marginRight:props.left}}>\r\n             <div style={{marginBottom:100}}>\r\n            \r\n                 \r\n                  \r\n                     <CardContent style={{justifyContent:\"center\",alignItems:\"center\"}}>\r\n                         <h2 className=\"cyber-text\" style={{marginBottom:70,display:'flex',justifySelf:\"center\"}}>Send a New Notification</h2>\r\n                         <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\" className=\"Forum\">\r\n                         <div style={{display:\"inline-flex\"}}>\r\n                             <TextField\r\n                                 required\r\n                                 id=\"TitleDup\"\r\n                                 label=\"Title\"\r\n                                 margin=\"normal\"\r\n                                 multiline\r\n                                 value={props.titleDup}\r\n                                 onChange={props.titleChange}\r\n                                 style={{width: 600}}\r\n                             />\r\n                               <EmojiPicker parent={\"TitleDup\"} onChange={props.titleChange}/>\r\n                             </div>\r\n                             <br />\r\n                             <div style={{display:\"inline-flex\"}}>\r\n                             <TextField\r\n                                 required\r\n                                 id=\"MessageDup\"\r\n                                 label=\"Message\"\r\n\r\n                                 margin=\"normal\" \r\n                                 value={props.messageDup}\r\n\r\n                                 multiline\r\n                                 onChange={props.subtitleChange}\r\n                                 style={{width: 600}}\r\n                             />\r\n                              <EmojiPicker parent={\"MessageDup\"}  onChange={props.subtitleChange}/>\r\n                             </div>\r\n                             <br />\r\n                             \r\n                               <TextField\r\n                                 required\r\n                                 id=\"URL image\"\r\n                                 label=\"URL image\"\r\n                                 margin=\"normal\"\r\n                                value={props.imageDup}\r\n                                 onChange={props.imageUrl}\r\n                                 style={{width: 600}}\r\n                                 \r\n                             />\r\n                            \r\n                            \r\n                              <br />\r\n                              <TextField\r\n                                 required\r\n                                 id=\"URL\"\r\n                                 label=\"URL\"\r\n                                 margin=\"normal\"\r\n                                 onChange={props.urlChange}\r\n                                 value={props.urlDup}\r\n                                 style={{width: 600}}\r\n                             />\r\n                              <br />\r\n                             <TextField\r\n                                 required\r\n                                 id=\"standard-required\"\r\n                                 label=\"Campaign\"\r\n                                 margin=\"normal\"\r\n                                 value={props.campagneDup}\r\n                                 onChange={props.campagne}\r\n                                 style={{width: 600,marginBottom:30}}\r\n                             />\r\n                              <br />\r\n                            <div style={{display:\"inline-flex\"}}>\r\n                              <TagsInput\r\n                                 value={selected}\r\n                                 onChange={props.emails}\r\n                                 disabled\r\n                                 name=\"Emails\"\r\n                                 placeHolder=\"enter emails\"\r\n                              \r\n                                 \r\n                               \r\n                             />\r\n                             <ReactFileReader handleFiles={handleFiles} >\r\n                                  <Button   style={{height:45,marginLeft:10}}\r\n                                  \r\n                             variant=\"contained\" color=\"primary\" className={buttonClassname}\r\n                             disabled={true}\r\n                             onClick={handleTimeOut}\r\n                             >\r\n                         <AddToPhotosOutlinedIcon className={classes.rightIcon} />\r\n                         Upload Emails\r\n                 </Button></ReactFileReader>\r\n                 {loading && <CircularProgress size={24} style={{marginLeft:-80,zIndex:1000,marginTop:10}} className={classes.buttonProgress} />}\r\n                             </div>  \r\n                         </Typography>\r\n                         <div style={{display:\"inline\",marginTop:10,marginBottom:30}}>\r\n \r\n         <Button variant=\"outlined\" disabled={true} color=\"primary\" onClick={()=>{setClicked(!click)}} style={{marginTop:15,marginBottom:15,height:55,width:220,justifyContent:\"normal\"}}>\r\n                 <ArrowDropDownIcon className=\"arrow\" style={{ transform:!click? \"rotate(-90deg)\" :\"rotate(0deg)\" }} /> additional data\r\n         </Button>   \r\n        \r\n      \r\n     \r\n       \r\n            \r\n       </div>\r\n                 {\r\n                 /** si le button additional data a été cliquer la partie des filtres s'affiche */\r\n                 click && (\r\n                      <Card className={classes.root} style={{backgroundColor:\"#e0e0e0cc\",marginTop:30}}>\r\n                      <CardContent style={{display:\"flex\",flexDirection:\"column\"}} >\r\n                      {children}\r\n                      \r\n                     </CardContent>\r\n                     <div style={{display:\"inline\",marginTop:10}}>\r\n                     <Button color=\"primary\" onClick={()=>{ setChilds(childs+1); _handleChilds()}}>\r\n                 <AddIcon />\r\n                 </Button>\r\n                 <Button color=\"#00FF00\" onClick={()=>{props.data(data)}} >\r\n                         <CheckIcon style={{color:\"#00FF00\"}} />\r\n                   </Button>\r\n                     </div>\r\n                    \r\n                 \r\n                    </Card>\r\n                     \r\n                 )}\r\n         \r\n           <div style={{display:\"flex\"}}><Button disabled={true}  variant=\"outlined\" color=\"primary\" onClick={()=>{setAdvanced(!advanced)}} style={{justifyContent:\"normal\",width:220,marginTop:15,marginBottom:15,height:55}}>\r\n                 <ArrowDropDownIcon className=\"arrow\" style={{ transform:!advanced? \"rotate(-90deg)\" :\"rotate(0deg)\" }} /> \r\n                 advanced sittings\r\n         </Button>   </div>\r\n         \r\n         {/** si le button andvanced a été cliquer la partie des filtres s'affiche */\r\n         advanced && (\r\n           \r\n                      <Card className={classes.root} style={{backgroundColor:\"#e0e0e0cc\",marginTop:30}}>\r\n                    \r\n                      <CardContent style={{display:\"flex\",flexDirection:\"column\"}} >\r\n               <div>\r\n                     <InputLabel  htmlFor=\"location\" style={{marginTop:10,marginBottom:5,fontSize:20}}>Location</InputLabel>\r\n                     <div style={{display:\"inline\",marginTop:10}}>\r\n                 <TextField id=\"outlined-basic\" label=\"Longitude\" variant=\"outlined\" style={{backgroundColor:\"#fff\"}} onChange={(e)=>{setLongitude(Number(e.target.value))}}/>\r\n                 <TextField id=\"outlined-basic\" label=\"Latitude\" variant=\"outlined\" style={{marginLeft:5,backgroundColor:\"#fff\"}}  onChange={(e)=>{setLatitude(Number(e.target.value))}}/>\r\n                 <TextField id=\"outlined-basic\" label=\"Raduis\" variant=\"outlined\" style={{marginLeft:5,backgroundColor:\"#fff\"}}  onChange={(e)=>{setRaduis(Number(e.target.value))}}/>\r\n                 \r\n                 </div>\r\n               </div>\r\n               <div>\r\n               <InputLabel  htmlFor=\"language\" style={{marginTop:10,marginBottom:5,fontSize:20}}>Language</InputLabel>\r\n               <div style={{display:\"inline\",marginTop:10}}>\r\n                       <FormControl variant=\"outlined\" className={classes.formControl}   style={{marginTop:15,marginBottom:15}}>\r\n                 <InputLabel htmlFor=\"outlined-age-native-simple\" style={{paddingTop:0,marginBottom:20}}>language</InputLabel>\r\n                 <Select\r\n                   native\r\n                   style={{width:285,backgroundColor:\"#fff\"}}\r\n                   name=\"language\"\r\n                   onChange={props.language}\r\n                   inputProps={{\r\n                     name: 'age',\r\n                     id: 'outlined-age-native-simple',\r\n                   }}\r\n                 >\r\n                   <option aria-label=\"None\" value=\"\" />\r\n                   <option value={\"en\"}>English</option>\r\n                   <option value={\"fr\"}>French</option>\r\n                   <option value={\"es\"}>Spanish</option>\r\n                 </Select>\r\n               </FormControl>\r\n               </div>\r\n               </div>\r\n               <div>\r\n                     <InputLabel  htmlFor=\"Country\" style={{marginTop:10,marginBottom:5,fontSize:20}}>Country</InputLabel>\r\n                     <CountrySelect country={props.country} />\r\n         </div>\r\n         <div>\r\n           \r\n           \r\n                  <InputLabel  htmlFor=\"Sessions\" style={{fontSize:20}}>Sessions</InputLabel>\r\n                  <SessionsSelector name={\"Last Sessions\"}  action_op={set_L_Session_op} action_value={set_L_Session} />\r\n                  <SessionsSelector name={\"First Sessions\"}  action_op={set_F_Session_op} action_value={set_F_Session} />\r\n                 <div>\r\n                     <InputLabel  htmlFor=\"Amount Time\" style={{marginTop:10,marginBottom:10,fontSize:20}}>Amount Spent</InputLabel>\r\n                     <div style={{display:\"inline\",marginTop:10,width:285,}}>\r\n                 <TextField id=\"outlined-basic\" label=\"amount spent greater than (min)\" variant=\"outlined\" style={{backgroundColor:\"#fff\",width:285,}} onChange={(e)=>{props.amountSpent( e.target.value)}}/>\r\n                \r\n                 \r\n                 </div>\r\n               </div>\r\n               <div>\r\n                     <InputLabel  htmlFor=\"session count\" style={{marginTop:10,marginBottom:10,fontSize:20}}>Session Count</InputLabel>\r\n                     <div style={{display:\"inline\",marginTop:10,width:285,}}>\r\n                 <TextField id=\"outlined-basic\" label=\"session count\" variant=\"outlined\" style={{backgroundColor:\"#fff\",width:285,}} onChange={(e)=>{props.session_count( e.target.value)}}/>\r\n                \r\n                 \r\n                 </div>\r\n               </div>\r\n               <div>\r\n               <InputLabel  htmlFor=\"patform\" style={{marginTop:10,marginBottom:10,fontSize:20}}>Platforms</InputLabel>\r\n               <FormControl variant=\"outlined\" className={classes.formControl}  style={{backgroundColor:\"#fff\",marginTop:15,marginBottom:15,width:285}}>\r\n         <InputLabel htmlFor=\"outlined-platform-native-simple\" style={{paddingTop:0,marginBottom:20}}>Platform</InputLabel>\r\n         <Select\r\n         \r\n           style={{width:285}}\r\n           name=\"platform\"\r\n           onChange={props.platform}\r\n           inputProps={{\r\n             name: 'age',\r\n             id: 'outlined-age-native-simple',\r\n           }}\r\n         >\r\n            <MenuItem value={\"android\"}>\r\n             <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                 <AndroidIcon style={{color:\"#3DDC84\"}} />\r\n                 <div> Android</div>\r\n             </div>\r\n         </MenuItem>\r\n         <MenuItem value={\"ios\"}>\r\n             <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                 <AppleIcon style={{color:\"#666666\"}} />\r\n                 <div> IOS</div>\r\n             </div>\r\n         </MenuItem>\r\n         <MenuItem value={\"all\"}>\r\n             <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                 \r\n                 <div> All</div>\r\n             </div>\r\n         </MenuItem>\r\n         </Select>\r\n       </FormControl>\r\n       </div>\r\n       <div>\r\n       <InputLabel  htmlFor=\"Send After\" style={{marginTop:10,marginBottom:10,fontSize:20}}>Send After</InputLabel>\r\n         <DateAndTimePickers time={handleTime} />\r\n       </div>\r\n \r\n               </div>\r\n                      \r\n                      \r\n                     </CardContent>\r\n                   \r\n                    \r\n                 \r\n                    </Card>\r\n                     \r\n                 )}\r\n                     </CardContent>\r\n \r\n                 <CardActions style={{paddingBottom:100}}>\r\n                     <Button  style={{marginBottom:100}} onClick={()=>{props.first_session(F_session,F_session_op);\r\n                                                                       props.last_session(L_session,L_session_op);\r\n                                                                       props.location(longitude,latitude,raduis);\r\n                                                                       handleEmails()\r\n                                                                       console.log(\"DT from form\", data)\r\n                                                                       props.time(time)\r\n                                                                       props.click(); }} \r\n                             variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                         <SendIcon className={classes.rightIcon} />\r\n                         Send\r\n                 </Button>\r\n                 </CardActions>\r\n                 \r\n            \r\n             </div>\r\n         </div >\r\n     );\r\n }\r\n \r\n \r\n export default NotificationDupForm;","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\SimplePopover.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Data\\Ref.js",["185"],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\DropDownElement.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\EmojiPicker.jsx",["186","187","188"],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\SessionsSelector.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\CountrySelect.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\DatePicker.jsx",["189","190"],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\detailsPopOver.jsx",["191","192","193","194","195"],"\r\n/*** \r\n *cette class définit le popover qui s'affiche en cliquant sur le button details \r\n * \r\n * \r\n * \r\n */\r\n\r\n\r\n import React,{ useState }  from 'react';\r\n import { makeStyles } from '@material-ui/core/styles';\r\n import Popover from '@material-ui/core/Popover';\r\n import Typography from '@material-ui/core/Typography';\r\n import Button from '@material-ui/core/Button';\r\n import TextField from '@material-ui/core/TextField';\r\n import SendIcon from '@material-ui/icons/Send';\r\n import axios from 'axios';\r\n import TrackChangesIcon from '@material-ui/icons/TrackChanges';\r\n import Link from '@material-ui/core/Link';\r\n import FileCopyIcon from '@material-ui/icons/FileCopy';\r\n import VisibilityIcon from '@material-ui/icons/Visibility';\r\n import MoreVertIcon from '@material-ui/icons/MoreVert';\r\n import { useHistory } from 'react-router-dom';\r\n\r\n export default function DetailsPopOver(props) {\r\n //useState ===  state en class\r\n   const [anchorEl, setAnchorEl] = useState(null);\r\n   // les données de la notification initialiser par l'email de l'utilisateur \r\n   const [notificationState, setNotificationState] = useState({\r\n     title: '',\r\n     subtitle: '',\r\n     emails:props.email\r\n    \r\n   });\r\n   //makeStyles === objet de définition de style fournit par material ui\r\n   const useStyles = makeStyles((theme) => ({\r\n     typography: {\r\n       padding: theme.spacing(2),\r\n       button: {\r\n         margin: theme.spacing(1),\r\n       },\r\n       rightIcon: {\r\n         marginLeft: theme.spacing(1),\r\n       },\r\n     },\r\n   }));\r\n   const classes = useStyles();\r\n   // chemin fournit par onesignal pour l'envoi des notifications\r\n   const path = \"https://onesignal.com/api/v1/notifications\";\r\n   /**parametre de la requettes http */\r\n   var params = {\r\n   \r\n       method: 'post',\r\n   \r\n       url: path,\r\n   \r\n       headers: {\r\n   \r\n         'Content-Type': 'application/json',\r\n           //clé secret de l'api REST\r\n         Authorization: 'Basic ZDI0ZTYyOGMtZmU5Mi00ZDM5LWJmZjEtZDhhMjdhN2NhMzIx'\r\n   \r\n       },\r\n   \r\n       data: {\r\n           // l'id de l'application\r\n         app_id: 'e88e0d46-c05a-45d7-a0fe-9e82eb884f88',\r\n   \r\n         headings: {\r\n           en: notificationState.title, \r\n         },\r\n         contents: {\r\n           en: notificationState.subtitle,\r\n         },\r\n        //ciblage des utilisateurs \r\n         filters :[{ \"key\": \"value\",\r\n         \"field\": \"email\",\r\n         \"value\": notificationState.emails,\r\n         \"relation\": \"=\"\r\n      }],\r\n        \r\n       }\r\n   \r\n     }\r\n   \r\n   const handleRetarget=()=>{axios(params).then(rep=>console.log(rep))} \r\n   \r\n   const handleClick = (event) => {\r\n     setAnchorEl(event.currentTarget);\r\n   };\r\n \r\n   const handleClose = () => {\r\n     setAnchorEl(null);\r\n   };\r\n   \r\nconst history = useHistory();\r\n \r\n   const open = Boolean(anchorEl);\r\n   const id = open ? 'simple-popover' : undefined;\r\n \r\n   return (\r\n     <div>\r\n       <Button style={{background:\"transparent\",borderColor:\"transparent\"}} aria-describedby={id}  onClick={handleClick}>\r\n       <MoreVertIcon className={classes.rightIcon} />\r\n       \r\n       </Button>\r\n       <Popover\r\n         id={id}\r\n         open={open}\r\n         anchorEl={anchorEl}\r\n         onClose={handleClose}\r\n         anchorOrigin={{\r\n           vertical: 'bottom',\r\n           horizontal: 'center',\r\n         }}\r\n         transformOrigin={{\r\n           vertical: 'top',\r\n           horizontal: 'center',\r\n         }}\r\n       >\r\n         <Typography className={classes.typography} style={{display:\"inline-flex\",flexDirection:\"column\"}}> \r\n               <div  style={{display:\"inline-flex\"}}>\r\n               <VisibilityIcon style={{marginRight:10 }}/>\r\n               <Link\r\n                component=\"button\"\r\n                variant=\"body2\"\r\n                style={{textDecoration:\"none\",color:\"#000\",marginBottom:10}}\r\n                onClick={() => {\r\n                    history.push('/NotifInfo',{id : props.id})\r\n                }}\r\n                >\r\n                Details\r\n                </Link>\r\n                 </div> \r\n\r\n                <div style={{display:\"inline-flex\"}}> \r\n                <FileCopyIcon style={{marginRight:10 }}/>\r\n               <Link\r\n                component=\"button\"\r\n                variant=\"body2\"\r\n                style={{textDecoration:\"none\",color:\"#000\"}}\r\n                onClick={() => {\r\n                  history.push('/NotifDuplicate',{notifId : props.id})\r\n                }}\r\n                >\r\n                Deplicate\r\n                </Link>\r\n                   </div> \r\n              \r\n                </Typography>\r\n       </Popover>\r\n     </div>\r\n   );\r\n }\r\n ","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Utils\\statsCardStyle.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\TabNotif.jsx",["196","197","198","199"],"\r\n/**\r\n * compoesent du premier tableau qui affiche les donées détailler de la notification\r\n */\r\n\r\nimport React, { useEffect,useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nlet rows=[];\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    \r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction createData(name, value) {\r\n  return { name, value };\r\n}\r\n\r\n\r\n\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\n\r\nexport default function CustomPaginationActionsTable(props) {\r\n  const classes = useStyles2();\r\n  const [page, setPage] = React.useState(0);\r\n  const [state, setState] = React.useState({load : true,data : undefined\r\n});\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(-1);\r\n\r\n\r\n  useEffect(() => {\r\n    \r\n    return () => {\r\n      \r\n   \r\n            rows = []\r\n        rows.push(  createData(\"headings\",  props.data.headings.en ))\r\n       \r\n     rows.push( createData(\"contents\",  props.data.contents.en))\r\n     rows.push( createData(\"sent at\", new Date(props.data.completed_at*1000).toUTCString(\"fr-FR\") ))\r\n     rows.push( createData(\"Data\", JSON.stringify(props.data.data)))\r\n     rows.push(createData(\"Android\", JSON.stringify(props.data.platform_delivery_stats.android)))\r\n     rows.push(createData(\"IOS\", JSON.stringify(props.data.platform_delivery_stats.ios)))\r\n     rows.push(createData(\"Succefull\", props.data.successful))}\r\n\r\n                 \r\n            }, []);\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n \r\n\r\n  return (\r\n    \r\n  <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"custom pagination table\">\r\n        <TableBody>\r\n          {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows\r\n          ).map((row) =>  ( <TableRow key={row.name}>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n            <strong> {row.name}</strong> \r\n            </TableCell>\r\n            <TableCell style={{ width: 160 }} align=\"right\">\r\n              {row.value}\r\n            </TableCell>\r\n         \r\n          </TableRow>))}\r\n\r\n          {emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <TableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n              colSpan={3}\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\n\r\n","C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\UserNotif.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Utils\\taskCardStyle.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Utils\\styles.jsx",[],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\UserDataView.jsx",["200","201"],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\PlayerTabInfos.jsx",["202"],"C:\\Users\\nassi\\ReactWorkSpace\\onesignal-dashboard\\src\\Components\\subComponent\\PlayerNotificationsTabs.jsx",["203","204","205","206"],{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":137,"column":14,"nodeType":"213","messageId":"214","endLine":137,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":214,"column":3,"nodeType":"217","messageId":"218","endLine":224,"endColumn":4},{"ruleId":"219","severity":1,"message":"220","line":29,"column":10,"nodeType":"221","messageId":"222","endLine":29,"endColumn":21},{"ruleId":"223","severity":1,"message":"224","line":68,"column":7,"nodeType":"225","endLine":68,"endColumn":9,"suggestions":"226"},{"ruleId":"211","severity":1,"message":"212","line":160,"column":15,"nodeType":"213","messageId":"214","endLine":160,"endColumn":17},{"ruleId":"215","severity":1,"message":"216","line":236,"column":4,"nodeType":"217","messageId":"218","endLine":246,"endColumn":5},{"ruleId":"223","severity":1,"message":"227","line":11,"column":8,"nodeType":"225","endLine":11,"endColumn":10,"suggestions":"228"},{"ruleId":"219","severity":1,"message":"229","line":28,"column":3,"nodeType":"221","messageId":"222","endLine":28,"endColumn":28},{"ruleId":"219","severity":1,"message":"230","line":32,"column":8,"nodeType":"221","messageId":"222","endLine":32,"endColumn":21},{"ruleId":"219","severity":1,"message":"231","line":143,"column":10,"nodeType":"221","messageId":"222","endLine":143,"endColumn":13},{"ruleId":"219","severity":1,"message":"232","line":158,"column":11,"nodeType":"221","messageId":"222","endLine":158,"endColumn":18},{"ruleId":"219","severity":1,"message":"233","line":80,"column":22,"nodeType":"221","messageId":"222","endLine":80,"endColumn":33},{"ruleId":"219","severity":1,"message":"234","line":84,"column":12,"nodeType":"221","messageId":"222","endLine":84,"endColumn":16},{"ruleId":"219","severity":1,"message":"235","line":87,"column":9,"nodeType":"221","messageId":"222","endLine":87,"endColumn":14},{"ruleId":"219","severity":1,"message":"236","line":93,"column":19,"nodeType":"221","messageId":"222","endLine":93,"endColumn":27},{"ruleId":"219","severity":1,"message":"237","line":139,"column":9,"nodeType":"221","messageId":"222","endLine":139,"endColumn":16},{"ruleId":"219","severity":1,"message":"238","line":152,"column":12,"nodeType":"221","messageId":"222","endLine":152,"endColumn":23},{"ruleId":"219","severity":1,"message":"239","line":152,"column":24,"nodeType":"221","messageId":"222","endLine":152,"endColumn":38},{"ruleId":"240","severity":1,"message":"241","line":458,"column":71,"nodeType":"242","messageId":"243","endLine":458,"endColumn":95},{"ruleId":"219","severity":1,"message":"244","line":43,"column":10,"nodeType":"221","messageId":"222","endLine":43,"endColumn":16},{"ruleId":"219","severity":1,"message":"245","line":17,"column":8,"nodeType":"221","messageId":"222","endLine":17,"endColumn":20},{"ruleId":"219","severity":1,"message":"231","line":62,"column":10,"nodeType":"221","messageId":"222","endLine":62,"endColumn":13},{"ruleId":"223","severity":1,"message":"246","line":85,"column":4,"nodeType":"225","endLine":85,"endColumn":6,"suggestions":"247"},{"ruleId":"219","severity":1,"message":"248","line":87,"column":7,"nodeType":"221","messageId":"222","endLine":87,"endColumn":14},{"ruleId":"211","severity":1,"message":"212","line":109,"column":31,"nodeType":"213","messageId":"214","endLine":109,"endColumn":33},{"ruleId":"219","severity":1,"message":"233","line":76,"column":23,"nodeType":"221","messageId":"222","endLine":76,"endColumn":34},{"ruleId":"219","severity":1,"message":"235","line":83,"column":10,"nodeType":"221","messageId":"222","endLine":83,"endColumn":15},{"ruleId":"219","severity":1,"message":"236","line":89,"column":20,"nodeType":"221","messageId":"222","endLine":89,"endColumn":28},{"ruleId":"219","severity":1,"message":"237","line":134,"column":10,"nodeType":"221","messageId":"222","endLine":134,"endColumn":17},{"ruleId":"219","severity":1,"message":"238","line":147,"column":13,"nodeType":"221","messageId":"222","endLine":147,"endColumn":24},{"ruleId":"219","severity":1,"message":"249","line":158,"column":10,"nodeType":"221","messageId":"222","endLine":158,"endColumn":22},{"ruleId":"250","severity":1,"message":"251","line":3,"column":5,"nodeType":"252","messageId":"253","endLine":5,"endColumn":6},{"ruleId":"219","severity":1,"message":"254","line":5,"column":9,"nodeType":"221","messageId":"222","endLine":5,"endColumn":19},{"ruleId":"219","severity":1,"message":"255","line":7,"column":9,"nodeType":"221","messageId":"222","endLine":7,"endColumn":15},{"ruleId":"219","severity":1,"message":"238","line":13,"column":16,"nodeType":"221","messageId":"222","endLine":13,"endColumn":27},{"ruleId":"219","severity":1,"message":"256","line":134,"column":3,"nodeType":"221","messageId":"222","endLine":134,"endColumn":17},{"ruleId":"219","severity":1,"message":"257","line":137,"column":24,"nodeType":"221","messageId":"222","endLine":137,"endColumn":40},{"ruleId":"219","severity":1,"message":"258","line":15,"column":9,"nodeType":"221","messageId":"222","endLine":15,"endColumn":18},{"ruleId":"219","severity":1,"message":"259","line":16,"column":9,"nodeType":"221","messageId":"222","endLine":16,"endColumn":17},{"ruleId":"219","severity":1,"message":"260","line":18,"column":9,"nodeType":"221","messageId":"222","endLine":18,"endColumn":25},{"ruleId":"219","severity":1,"message":"261","line":29,"column":30,"nodeType":"221","messageId":"222","endLine":29,"endColumn":50},{"ruleId":"219","severity":1,"message":"262","line":86,"column":10,"nodeType":"221","messageId":"222","endLine":86,"endColumn":24},{"ruleId":"219","severity":1,"message":"263","line":6,"column":27,"nodeType":"221","messageId":"222","endLine":6,"endColumn":35},{"ruleId":"219","severity":1,"message":"264","line":107,"column":10,"nodeType":"221","messageId":"222","endLine":107,"endColumn":15},{"ruleId":"219","severity":1,"message":"265","line":107,"column":17,"nodeType":"221","messageId":"222","endLine":107,"endColumn":25},{"ruleId":"223","severity":1,"message":"266","line":128,"column":16,"nodeType":"225","endLine":128,"endColumn":18,"suggestions":"267"},{"ruleId":"219","severity":1,"message":"268","line":18,"column":4,"nodeType":"221","messageId":"222","endLine":18,"endColumn":17},{"ruleId":"223","severity":1,"message":"269","line":42,"column":7,"nodeType":"225","endLine":42,"endColumn":9,"suggestions":"270"},{"ruleId":"219","severity":1,"message":"271","line":13,"column":8,"nodeType":"221","messageId":"222","endLine":13,"endColumn":18},{"ruleId":"219","severity":1,"message":"263","line":6,"column":28,"nodeType":"221","messageId":"222","endLine":6,"endColumn":36},{"ruleId":"219","severity":1,"message":"264","line":107,"column":11,"nodeType":"221","messageId":"222","endLine":107,"endColumn":16},{"ruleId":"219","severity":1,"message":"265","line":107,"column":18,"nodeType":"221","messageId":"222","endLine":107,"endColumn":26},{"ruleId":"223","severity":1,"message":"272","line":141,"column":17,"nodeType":"225","endLine":141,"endColumn":19,"suggestions":"273"},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'notifiction' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'loc.state.notifId' and 'notif.filters'. Either include them or remove the dependency array.","ArrayExpression",["276"],"React Hook useEffect has a missing dependency: 'location.state.id'. Either include it or remove the dependency array.",["277"],"'NotificationsNoneOutlined' is defined but never used.","'SimplePopover' is defined but never used.","'row' is assigned a value but never used.","'rowData' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'data' is assigned a value but never used.","'timer' is assigned a value but never used.","'setMails' is assigned a value but never used.","'filters' is assigned a value but never used.","'chosenEmoji' is assigned a value but never used.","'setChosenEmoji' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'mytext' is assigned a value but never used.","'MoreVertIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.",["278"],"'history' is assigned a value but never used.","'onEmojiClick' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Typography' is defined but never used.","'Button' is defined but never used.","'DateTimePicker' is defined but never used.","'handleDateChange' is assigned a value but never used.","'TextField' is defined but never used.","'SendIcon' is defined but never used.","'TrackChangesIcon' is defined but never used.","'setNotificationState' is assigned a value but never used.","'handleRetarget' is assigned a value but never used.","'useState' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.data.completed_at', 'props.data.contents.en', 'props.data.data', 'props.data.headings.en', 'props.data.platform_delivery_stats.android', 'props.data.platform_delivery_stats.ios', and 'props.data.successful'. Either include them or remove the dependency array.",["279"],"'Accessibility' is defined but never used.","React Hook React.useEffect has a missing dependency: 'loc.state.email'. Either include it or remove the dependency array.",["280"],"'PersonIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["281"],"no-global-assign","no-unsafe-negation",{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},"Update the dependencies array to be: [loc.state.notifId, notif.filters]",{"range":"294","text":"295"},"Update the dependencies array to be: [location.state.id]",{"range":"296","text":"297"},"Update the dependencies array to be: [props.data]",{"range":"298","text":"299"},"Update the dependencies array to be: [props.data.completed_at, props.data.contents.en, props.data.data, props.data.headings.en, props.data.platform_delivery_stats.android, props.data.platform_delivery_stats.ios, props.data.successful]",{"range":"300","text":"301"},"Update the dependencies array to be: [loc.state.email]",{"range":"302","text":"303"},"Update the dependencies array to be: [props]",{"range":"304","text":"305"},[2284,2286],"[loc.state.notifId, notif.filters]",[383,385],"[location.state.id]",[2219,2221],"[props.data]",[4120,4122],"[props.data.completed_at, props.data.contents.en, props.data.data, props.data.headings.en, props.data.platform_delivery_stats.android, props.data.platform_delivery_stats.ios, props.data.successful]",[1640,1642],"[loc.state.email]",[4785,4787],"[props]"]